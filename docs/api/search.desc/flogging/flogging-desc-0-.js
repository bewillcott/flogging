searchState.loadedDescShard("flogging", 0, "FLogging\nALL is a special level that can be used to turn on logging …\nCONFIG is a message level for static configuration …\nRefers to the <code>ConsoleHandler</code> =&gt; <code>ConsoleType::StdOut</code>.\nPublishes log entries to the console.\n<code>ConsoleType</code> configures the <code>ConsoleHandler</code>’s output.\nReturned from <code>FromStr::from_str()</code> when an unknown string …\nAn iterator over the variants of ConsoleType\nCustom format.\nCustom format.\nRefers to a custom handler; by default: <code>MockHandler</code>.\nRefers to the <code>ConsoleHandler</code> =&gt; <code>ConsoleType::StdErr</code>.\nFINE is a message level providing tracing information.\nFINER indicates a fairly detailed tracing message. Suggest …\nFINEST indicates a highly detailed tracing message.\nRefers to the <code>FileHandler</code>.\nPublishes log entries to the file whose name was provided …\nProvides methods for formatting <code>LogEntry</code>s.\nUsed as a simple way to obtain the various <code>Formatter</code>s.\nProvides wrappers for holding each type of formatter.\nAvailable handlers.\nProvides common methods required for all handlers.\nINFO is a message level for informational messages.\nISO 8601 / RFC 3339 date &amp; time format.\nISO 8601 / RFC 3339 date &amp; time format.\nISO 8601 / RFC 3339 date &amp; time format.\nLog entry level setting.\nUsed to provide relevant information about each log entry.\nThis is the work-horse, providing the primary methods of …\nUsed by <code>Logger</code> to provide more flexibility in the …\nMock Formatter.\nThis is used as a <em>fake</em> or <em>mock</em> handler.\nOFF is a special level that can be used to turn off …\nRefers to the <code>ConsoleHandler</code> =&gt; <code>ConsoleType::Production</code>.\nIf <code>log_entry.level</code> is <code>LeveL::INFO</code>, then prints unformatted …\nSEVERE is a message level indicating a serious failure.\nSimple format.\nSimple format.\nSimple format.\nPrint to <code>stderr</code>.\nPrints to <code>stdout</code>.\nRefers to the <code>StringHandler</code>.\nPublishes log entries to an internal list.\nUnix Timestamp format.\nUnix Timestamp format.\nUnix Timestamp format.\nWARNING is a message level indicating a potential problem.\nAdds a <code>ConsoleHandler</code> with the default formatter, with …\nAdds a <code>ConsoleHandler</code> with the required formatter, with …\nAdds a custom handler with the default formatter.\nAdds a custom handler with the required formatter.\nAdds a <code>ConsoleHandler</code> with the default formatter, with …\nAdds a <code>ConsoleHandler</code> with the required formatter, with …\nAdds a <code>FileHandler</code> with the default formatter.\nAdds a <code>FileHandler</code> with the required formatter.\nAdds a <code>ConsoleHandler</code> with the default formatter, with …\nAdds a <code>ConsoleHandler</code> with the required formatter, with …\nAdds a <code>StringHandler</code> with the default formatter.\nAdds a <code>StringHandler</code> with the required formatter.\nConverts a console type to its string version.\nConverts a level to its string version.\nComplete the build process and produce the final <code>Logger</code> …\nCreate a new Logger instance.\nClose the Handler and free all associated resources.\nRemoves the internal buffer, if in <code>test_mode</code>. Will …\nFlushes and closes the file. Also, removes the internal …\nThis is a ‘NoOp’ fn.\nLog a CONFIG message.\nLog a CONFIG message.\nCreate new Logger instance, with a <code>ConsoleHandler</code>, output …\nSetup module level logger access.\nSetup module level logger access.\nCreate a new handler instance.\nCreate a new handler instance.\nProvides the requisite <code>Formatter</code>.\nCreate new Logger instance, with a custom handler.\nReturns the date/time format string.\nReturns the date/time format string.\nReturns the date/time format string.\nReturns the date/time format string.\nCreate new Logger instance, with a <code>ConsoleHandler</code>, output …\nLog a method entry.\nLog entry into a function/method.\nLog a method entry.\nLog a method return.\nLog return from a function/method.\nLog a method return.\nCreate new Logger instance, with a <code>FileHandler</code>.\nLog a FINE message.\nLog a FINE message.\nLog a FINER message.\nLog a FINER message.\nLog a FINEST message.\nLog a FINEST message.\nFlush any buffered output.\nClears the internal buffer, if in <code>test_mode</code>.\nThis is a ‘NoOp’ fn.\nReturns the primary format string.\nReturns the primary format string.\nReturns the primary format string.\nReturns the primary format string.\nGet the current function/method name.\nUse this method to setup the parameters for calling …\nFormat the text of the <code>log_entry</code>, in accordance with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method does the actual formatting of the <code>log_entry</code>.\nThis method does the actual formatting of the <code>log_entry</code>.\nReturn the Formatter for this Handler.\nGet required <code>Handler</code>.\nGet the required <code>Handler</code>.\nReturn a copy of the internal buffer as a <code>String</code>.\nCheck if the required <code>Handler</code> has been added to this <code>Logger</code>…\nLog a INFO message.\nLog an INFO message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether or not this logger is processing log …\nChecks whether or not this logger is processing log …\nCheck status of this handler.\n<code>ConsoleHandler</code> is <em>always</em> open.\nThis is always <code>false</code>.\nObtain the current logging level for this Log instance.\nProvides for logging within the attributed function/method.\nCreates a new instance of <code>Iso8601Formatter</code>.\nCreates a new instance of <code>MockFormatter</code>.\nCreates a new instance of <code>SimpleFormatter</code>.\nCreates a new instance of <code>UnixTimestampFormatter</code>.\nCreate new Logger instance, with a <code>ConsoleHandler</code>, output …\nPublish a LogEntry.\nRemove an existing log file.\nRemove an existing log file.\nSet the current function/method name.\nSet the current function/method name.\nSet a Formatter.\nSet the logging level for the <code>Logger</code> instance being …\nSet logging level for this Log instance.\nSet the logging level for this <code>Logger</code> instance.\nSet test mode.\nSets the test mode to <code>state</code>.\nSets the test mode to <code>state</code>.\nThis is a ‘NoOp’ fn.\nThis is a ‘NoOp’ fn. Use <code>get_log()</code>, as this already …\nLog a SEVERE message.\nLog a SEVERE message.\nCreate new Logger instance, with a <code>ConsoleHandler</code>.\nLog a WARNING message.\nLog a WARNING message.")